package boilerpipe

import (
	"encoding/base64"
	"fmt"
	"log"
	"os"
	"path/filepath"
	"testing"
	"time"

	"github.com/jlubawy/go-boilerpipe/normurl"
)

func ExampleArticlePipeline() {
	// Order of URLs much match the content in testdata
	var rawurls = []string{
		"https://blog.openshift.com/day-18-boilerpipe-article-extraction-for-java-developers",
		"https://lasvegassun.com/news/2017/apr/20/lease-no-rent-for-raiders-at-las-vegas-stadium",
		"https://lasvegassun.com/news/2017/may/22/yucca-mountain-nuclear-waste-donald-trump",
		"https://dealbook.nytimes.com/2006/09/12/big-names-pull-cash-from-venture-capital-fund-over-political-contributions",
	}

	for i, rawurl := range rawurls {
		var date time.Time

		// Normalize the URL
		u, err := normurl.Parse(rawurl)
		if err != nil {
			log.Fatal(err)
		}

		// Retrieve the content
		f, err := os.Open(filepath.Join("testdata", fmt.Sprintf("%d.html", i)))
		if err != nil {
			log.Fatal(err)
		}
		defer f.Close()

		// Create and process the document
		doc, err := ParseDocument(f)
		if err != nil {
			log.Fatal(err)
		}
		NewArticlePipeline().Process(doc)

		// Log the document's title
		fmt.Println(doc.Title)

		// Get the time at which the article was written
		if d, exists := u.Date(); exists {
			// If the URL has a date use it first since it's probably more
			// reliable
			date = d
		} else {
			// Else use the document's date
			date = doc.Date
		}

		// Only log the date if it's not empty
		if !date.Equal(time.Time{}) {
			fmt.Println(date.Format("January 2, 2006"))
		}

		// Log the normalized URL
		fmt.Println(u)

		// Log the base64 encoded content
		fmt.Println(base64.StdEncoding.EncodeToString([]byte(doc.Content())))
		fmt.Println()
	}

	// Output:
	// Day 18: Boilerpipe--Article Extraction for Java Developers â€“ OpenShift Blog
	// November 15, 2013
	// https://blog.openshift.com/day-18-boilerpipe-article-extraction-for-java-developers
	// 
	//
	// Lease: No rent for Las Vegas Raiders at new stadium - Las Vegas Sun Newspaper
	// April 20, 2017
	// https://lasvegassun.com/news/2017/apr/20/lease-no-rent-for-raiders-at-las-vegas-stadium
	// TGVhc2U6IE5vIHJlbnQgZm9yIExhcyBWZWdhcyBSYWlkZXJzIGF0IG5ldyBzdGFkaXVtCkEgZmFuIHdlYXJzIGEgUmFpZGVycyBULXNoaXJ0IG91dHNpZGUgYSBtZWV0aW5nIG9mIHRoZSBMYXMgVmVnYXMgU3RhZGl1bSBBdXRob3JpdHkgb24gVGh1cnNkYXksIEFwcmlsIDIwLCAyMDE3LiBUaGUgUmFpZGVycyB3aWxsIG1vdmUgZnJvbSBPYWtsYW5kIHRvIExhcyBWZWdhcyBhZnRlciBjb25zdHJ1Y3Rpb24gb2YgYSBuZXcgc3RhZGl1bSBpcyBjb21wbGV0ZWQuCkZyb20gc3RhZmYgYW5kIHdpcmUgcmVwb3J0cwpQdWJsaXNoZWQgVGh1cnNkYXksIEFwcmlsIDIwLCAyMDE3IHwgMjowMiBwLm0uClVwZGF0ZWQgVGh1cnNkYXksIEFwcmlsIDIwLCAyMDE3IHwgMjoxNyBwLm0uClRoZSBPYWtsYW5kIFJhaWRlcnMgd291bGQgbm90IHBheSByZW50IGF0IHRoZSBwcm9wb3NlZCBzdGFkaXVtIHRoZXkgd2FudCB0byB1c2UgaW4gTGFzIFZlZ2FzLgpBIGRyYWZ0IG9mIGEgbGVhc2UgYWdyZWVtZW50IGNhbGxpbmcgZm9yIG5vIHJlbnQgd2FzIHVudmVpbGVkIGR1cmluZyBhIFRodXJzZGF5IGdhdGhlcmluZyBvZiB0aGUgcHVibGljIGVudGl0eSBvdmVyc2VlaW5nIHRoZSBwcm9wb3NlZCAkMS45IGJpbGxpb24gcHJvamVjdC4KTGFzIFZlZ2FzIFN0YWRpdW0gQXV0aG9yaXR5IGJvYXJkIENoYWlybWFuIFN0ZXZlIEhpbGwgaGFzIHNhaWQgdGhlIGVudGl0eSwgd2hpY2ggd291bGQgb3duIHRoZSBzdGFkaXVtLCBjYW5ub3QgcmVjZWl2ZSBhbnkgcmV2ZW51ZSBiZWNhdXNlIGl0IGNvdWxkIGNhdXNlIGJvbmRzIGZvciB0aGUgcHJvamVjdCB0byBsb3NlIHRoZWlyIHRheC1leGVtcHQgc3RhdHVzLgpBIHByZXZpb3VzIHZlcnNpb24gb2YgdGhlIGxlYXNlIGFncmVlbWVudCBjYWxsZWQgZm9yIGEgJDEgYW5udWFsIHJlbnQuClRoZSBSYWlkZXJzIHBhaWQgJDMuNSBtaWxsaW9uIGluIHJlbnQgdG8gcGxheSBhdCBPYWtsYW5kLUFsYW1lZGEgQ291bnR5IENvbGlzZXVtIGluIDIwMTYsIHVwIGZyb20gJDkyNSwwMDAgZm9yIHRoZSAyMDE1IHNlYXNvbi4KTkZMIHRlYW0gb3duZXJzIGFwcHJvdmVkIHRoZSBSYWlkZXJzIHJlbG9jYXRpb24gbGFzdCBtb250aC4KQXQgbGVhc3QgNDYsMDAwIHBlcnNvbmFsIHNlYXQgbGljZW5zZSBkZXBvc2l0cyBoYXZlIGJlZW4gY29sbGVjdGVkIGJ5IHRoZSBSYWlkZXJzIGFzIHRoZXkgcHJlcGFyZSB0byBtb3ZlIHRvIExhcyBWZWdhcyBpbiB0aHJlZSB5ZWFycy4KUmFpZGVycyBQcmVzaWRlbnQgTWFyYyBCYWRhaW4gYW5ub3VuY2VkIHRoYXQgZmlndXJlIGZvciB0aGUgZmlyc3QgdGltZSBpbiB1cGRhdGluZyB0aGUgYm9hcmQgYXQgaXRzIG1lZXRpbmcgYXQgdGhlIENsYXJrIENvdW50eSBHb3Zlcm5tZW50IENlbnRlci4gRWFjaCAkMTAwIGxpY2Vuc2UgZGVwb3NpdCBjb3ZlcnMgb25lIGhvdXNlaG9sZCBhbmQgY291bGQgYWNjb3VudCBmb3IgbXVsdGlwbGUgdGlja2V0cywgbWVhbmluZyB0aGUgdGVhbSBhcHBlYXJzIG9uIHRyYWNrIHRvIGJlIGFibGUgdG8gc2VsbCBtb3JlIHRoYW4gZW5vdWdoIFBTTHMgYW5kIHNlYXNvbiB0aWNrZXRzIHRvIGZpbGwgdGhlIDY1LDAwMC1zZWF0IGRvbWVkIHN0YWRpdW0uCkJhZGFpbiBhbHNvIHRvbGQgdGhlIGJvYXJkIHRoZSB0ZWFtIHdpbGwgYW5ub3VuY2UgcGlja3MgaW4gdGhlIE5GTCBkcmFmdCBmcm9tIHRoZSBMYXMgVmVnYXMgd2VsY29tZSBzaWduIGF0IHRoZSBzb3V0aCBlbmQgb2YgdGhlIFN0cmlwIG9uIFNhdHVyZGF5LCBBcHJpbCAyOS4gVGhhdCBpcyB0aGUgdGhpcmQgYW5kIGZpbmFsIGRheSBvZiB0aGUgZHJhZnQuCkxhcyBWZWdhcyBTdW4gcmVwb3J0ZXIgQWRhbSBDYW5kZWUgYW5kIHRoZSBBc3NvY2lhdGVkIFByZXNzIGNvbnRyaWJ1dGVkIHRvIHRoaXMgcmVwb3J0LgowCkpvaW4gdGhlIERpc2N1c3Npb246CkNoZWNrIHRoaXMgb3V0IGZvciBhIGZ1bGwgZXhwbGFuYXRpb24gb2Ygb3VyIGNvbnZlcnNpb24gdG8gdGhlIExpdmVGeXJlIGNvbW1lbnRpbmcgc3lzdGVtIGFuZCBpbnN0cnVjdGlvbnMgb24gaG93IHRvIHNpZ24gdXAgZm9yIGFuIGFjY291bnQu
	//
	// Nevada's nuclear dilemma: Inside the reignited fight over Yucca Mountain - Las Vegas Sun Newspaper
	// May 22, 2017
	// https://lasvegassun.com/news/2017/may/22/yucca-mountain-nuclear-waste-donald-trump
	// 
	//
	// Big Names Pull Cash from V.C. Fund Over Political Contributions - The New York Times
	// September 12, 2006
	// https://dealbook.nytimes.com/2006/09/12/big-names-pull-cash-from-venture-capital-fund-over-political-contributions
	// VGhlIE5ldyBZb3JrIFRpbWVzCkRlYWxCb29rIHwgQmlnIE5hbWVzIFB1bGwgQ2FzaCBmcm9tIFYuQy4gRnVuZCBPdmVyIFBvbGl0aWNhbCBDb250cmlidXRpb25zClNlYXJjaApCaWcgTmFtZXMgUHVsbCBDYXNoIGZyb20gVi5DLiBGdW5kIE92ZXIgUG9saXRpY2FsIENvbnRyaWJ1dGlvbnMKQnkgd3JpdGVyClNlcHRlbWJlciAxMiwgMjAwNiA3OjQyIGFtClNlcHRlbWJlciAxMiwgMjAwNiA3OjQyIGFtCkEgdmVudHVyZSBjYXBpdGFsIGZ1bmQgYmFzZWQgaW4gQ2VudHVyeSBDaXR5LCBDYWxpZi4sIGJhY2tlZCBieSB0aGUgbGlrZXMgb2YgSGFydmFyZCwgQm9laW5nIGFuZCBvdGhlciBiaWctbGVhZ3VlIGludmVzdG9ycywgYW5kIGNvbnN1bHRpbmcgd2l0aCBzdWNoIGRpc3BhcmF0ZSBhZHZpc2VycyBhcyB0aGUgQ29sdW1iaWEgVW5pdmVyc2l0eSBidXNpbmVzcyBzY2hvb2wgZGVhbiBhbmQgS0lTUyBzaW5nZXIgR2VuZSBTaW1tb25zLCBoYXMgcnVuIGludG8gdHJvdWJsZSBvdmVyIGFsbGVnYXRpb25zIHRoYXQgaXRzIGZvdW5kZXJzIHNvbGljaXRlZCBwb2xpdGljYWwgY29udHJpYnV0aW9ucyBmb3JtIHRoZWlyIHN0YXJ0LXVwcy4KQ2FsbGluZyB0aGVtc2VsdmVzIEludGVybmF0aW9uYWwgVGVjaG5vbG9neSBVbml2ZXJzaXR5LCB0aGUgc25lYWtlci1jbGFkIHBhcnRuZXJzIHNjb3VyZWQgdG9wIGVuZ2luZWVyaW5nIHNjaG9vbHMsIHNlZWtpbmcgbmV3IHRlY2hub2xvZ2llcyB0byB0dXJuIGludG8gcHJvZml0YWJsZSBidXNpbmVzc2VzLiBBbmQgb3ZlciB0aGUgbGFzdCBzaXggeWVhcnMsIHRoZSBkdW8gcGVyc3VhZGVkIGludmVzdG9ycyB0byBlbnRydXN0IHRoZW0gd2l0aCAkMjUwIG1pbGxpb24gdG8gdXNlIGFzIHNlZWQgbW9uZXkuClRoZSB0d28gZnVuZGVkIDM2IHN0YXJ0LXVwcywgc2V2ZXJhbCBvZiB3aGljaCB0dXJuZWQgaGVhbHRoeSBwcm9maXRzLiBCdXQgbGFzdCBtb250aCwgdGhlaXIgZm9ydHVuZXMgdHVybmVkLiBUaGVpciBtb3N0IHByZXN0aWdpb3VzIGludmVzdG9ycywgSGFydmFyZCBVbml2ZXJzaXR5IGFuZCBwdWJsaWMgcGVuc2lvbiBmdW5kcyBpbiBDYWxpZm9ybmlhLCBDb2xvcmFkbyBhbmQgTmV3IE1leGljbywgcHVsbGVkICQxMjAgbWlsbGlvbiBvdXQgb2YgdGhlIGZpcm0sIGN1dHRpbmcgb2ZmIG11Y2ggb2YgdGhlIGNvbXBhbnnigJlzIGNhc2ggc3VwcGx5LgpUaGUgaW52ZXN0b3JzIHNhaWQgdGhleSB3ZXJlIHRyb3VibGVkIHRoYXQgdGhlIHR3byBwYXJ0bmVycywgQ2hhZCBCcm93bnN0ZWluIGFuZCBKb25haCBTY2huZWwsIHNvbGljaXRlZCBwb2xpdGljYWwgY29udHJpYnV0aW9ucyBmcm9tIHRoZSBmbGVkZ2xpbmcgZmlybXMgdGhleSBmaW5hbmNlZCwgYW5kIHNldmVyYWwgb2JsaWdlZC4=
	//
}

func TestStartsWithNumber(t *testing.T) {
	startsWithNumber := func(text string) bool {
		return StartsWithNumber(text, " comments", " users responded in")
	}

	// True
	if !startsWithNumber("123 comments") {
		t.Error("expected to start with number")
	}

	// True
	if !startsWithNumber("456 users responded in") {
		t.Error("expected to start with number")
	}

	// False
	if startsWithNumber("abc comments") {
		t.Error("not expected to start with number")
	}

	// False
	if startsWithNumber("def users responded in") {
		t.Error("not expected to start with number")
	}
}
